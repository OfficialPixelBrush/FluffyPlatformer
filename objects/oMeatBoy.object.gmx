<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables
grav = 2;
hsp = 0;
vsp = 0;
jumpspeed = 20;
movespeed = 14;


gamepad_set_axis_deadzone(0,0.7);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Get the player`s Input
key_right = keyboard_check(ord("D")) || (gamepad_axis_value(0,gp_axislh) &gt; 0 );
key_left = -(keyboard_check(ord("A")) || (gamepad_axis_value(0,gp_axislh) &lt; 0 ));

key_jump = keyboard_check_pressed(vk_space) || (gamepad_button_check_pressed(0,gp_face2));

//React to inputs
move = key_left + key_right;
hsp = move * movespeed;
if (vsp &lt; 10) vsp += grav; 

if (place_meeting(x,y+1,oGround))
{
vsp = key_jump * -jumpspeed
}

if (key_jump) &amp;&amp; (place_meeting(x+1,y,oGround)) ||(key_jump) &amp;&amp; place_meeting(x-1,y,oGround)
{
    vsp = -jumpspeed;
}

//Horizontal Colission
if (place_meeting(x+hsp,y,oGround))
{
while(!place_meeting(x+sign(hsp),y,oGround))
{
x += sign(hsp);
}
hsp = 0;
}
x += hsp;

//Vertival Colission
if (place_meeting(x,y+vsp,oGround))
{
while(!place_meeting(x,y+sign(vsp),oGround))
{
y += sign(vsp);
}
vsp = 0;
}

y += vsp;

//Animate
if (hsp!=0) image_xscale = move;
if (place_meeting(x,y+1,oGround))
{
    if (hsp!=0) sprite_index = sMeatBoyRun; else sprite_index = sMeatBoyStand
}
else
{
    if (vsp &lt; 0) sprite_index = sMeatBoyJump; else sprite_index = sMeatBoyFall
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
